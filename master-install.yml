# configure the master node and initialize the cluster
#  initialize the cluster and install Calico:
#   - By running the first Kubeadm task "init" the cluster is initialized,
#     passing the argument --pod-network-cidr = 172.16.0.0 / 16 (naver cloud), kuberbetes default=10.244.0.0/16
#
#   - With the second task the creation of a .kube directory in / home / ubuntu is initialized,
#     and it will contain all the configuration
#     information, such as the admin key files, needed to connect to the cluster, and the cluster API address.
#
#   - With the third task the /etc/kubernetes/admin.conf file generated
#     by kubeadm init to the non-root user's home directory will be copied.
#     This will allow you to use kubectl to access the newly created cluster.

# Note: if you prefer to use Flannel CNI plugin instead of Calico, it suffices to replace that part with:
#   - With the fourth task, you are running Kubectl apply to install Flannel.
#     kubectl apply -f descriptor. [yml | json] is the syntax for telling Kubectl to create the objects described in the descriptor file. [yml | json].
#     The kube-flannel.yml file contains descriptions of the objects needed to configure Flannel in the cluster.
#
# replace calico CNI
#    - name: install Pod network flannel CNI
#      become: yes
#      become_user: ubuntu
#      shell: kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml >> pod_network_setup.txt
#      args:
#        chdir: $HOME
#        creates: pod_network_setup.txt

---
- hosts: master
  become: yes

  tasks:
#---------------------- Dependencies -----------------------------------------
    - name: remove swap [swapoff -a]
      shell: "swapoff -a"

    - name: remove swap fstab
      shell: sed -i '/ swap / s/^\(.*\)$/#\1/g' /etc/fstab

    - name: insert String in k8s.conf (modprobe br_netfilter, bridge network, iptable enable)
      become: yes
      blockinfile:
        marker: ""
        path: /etc/sysctl.d/k8s.conf
        block: |
          br_netfilter
          net.bridge.bridge-nf-call-ip6tables = 1
          net.bridge.bridge-nf-call-iptables = 1
        state: present
        create: yes

    - name: update sysctl
      command: sysctl --system

    - name: ufw daemon-state changes and disable
      become: yes
      ansible.builtin.systemd:
        name: ufw
        state : stopped
        enabled: no

#---------------------- Install ----------------------------------------------------------- 
  # repository  
    - name: INSTALL APT Transport HTTPS
      apt:
        name: apt-transport-https
        state: present

    - name: ADD Kubernetes apt-key (google cloud public signing key)
      apt_key:
        url: https://packages.cloud.google.com/apt/doc/apt-key.gpg
        state: present

    - name: ADD Kubernetes' APT repository
      apt_repository:
        repo: deb http://apt.kubernetes.io/ kubernetes-xenial main
        state: present
        filename: 'kubernetes'

    - name: apt update
      apt:
        update_cache: true
        cache_valid_time: 3600

# kubernetes tools
    - name: INSTALL kubelet kubernetes agent
      apt:
        name: kubelet
        state: present
        update_cache: true

    - name: INSTALL kubeadm kubernetes cluster init tool
      apt:
        name: kubeadm
        state: present

    - name: INSTALL kubectl kubernetes command tool
      apt:
        name: kubectl
        state: present

    - name: INSTALL DOCKER
      apt:
        name: docker.io
        state: present
        update_cache: true

#----------------------- Setting ---------------------------------------------------------
    - name: Docker daemon-state stopped
      become: yes
      ansible.builtin.systemd:
        name: docker
        state : stopped

    - name: create daemon.json and change Cgroup Driver cgroupfs -> systemd
      become: yes
      blockinfile:
        marker: ""
        path: /etc/docker/daemon.json
        block: |
          {
            "exec-opts": ["native.cgroupdriver=systemd"],
            "log-driver": "json-file",
            "log-opts": { "max-size": "100m" },
            "storage-driver": "overlay2"
          }
        state: present
        create: yes

    - name: daemon-reload to pick up config changes
      become: yes
      ansible.builtin.systemd:
        daemon_reload: yes

    - name: Docker daemon-state enable
      become: yes
      ansible.builtin.systemd:
        name: docker
        enabled: yes

    - name: Docker daemon-state restart
      become: yes
      ansible.builtin.systemd:
        name: docker
        state : started
